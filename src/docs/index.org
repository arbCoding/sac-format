#+options: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+options: email:t expand-links:t f:t inline:t num:nil p:nil pri:nil prop:nil
#+options: stat:t tags:t tasks:t tex:t timestamp:nil title:t toc:t todo:t |:t
#+title: sac-format
#+date: <2023-11-15 Wed>
#+author: Alexander R. Blanchette
#+email: arbCoding@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.1 (Org mode 9.7)
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
--------------
* Introduction
sac-format is a single-header statically linked library designed to make working
with binary [[https://ds.iris.edu/files/sac-manual/manual/file_format.html][SAC]]-files as easy as possible. Written in C++20, it follows a modern
and easy to read programming-style while providing the high performance brought
by C++.

sac-format's actively developed on [[https://github.com/arbCoding/sac-format][GitHub]]!

** Why sac-format
sac-format is Free and Open Source Software (FOSS) released under the MIT
license. Anyone can use it, for any purpose (including proprietary software),
anywhere in the world. sac-format's operating system agnostic and confirmed
working on Windows, macOS, and Linux systems.
*** High-Level Trace Class
sac-format includes the =Trace= class for seismic traces, providing high-level
object-oriented abstraction to seismic data. With the =Trace= class, you don't
need to worry about manually reading SAC-files word-by-word. It is compatible
with =v6= and =v7= SAC-files and can automatically detect the version upon reading.
File output defaults to =v7= SAC-files and there is a /legacy-write/ function for =v6=
output.
*** Low-Level I/O
If you want to roll your own SAC-file processing workflow you can use the
low-level I/O functionality built into sac-format. All functions tested and
confirmed working---they're used to build the =Trace= class!
*** Safe
sac-format's *safe*---testing is an important part of software development. The
sac-format library is extensively tested using the [[https://github.com/catchorg/Catch2][Catch2]] testing framework.
Everything from low-level binary conversions to high-level =Trace= reading/writing
are tested and confirmed working. New tests added when they're imagined. Check
and run the tests yourself---see =utests.cpp=.
*** Fast
sac-format's *fast*---it's written in C++ and extensively benchmarked. You can run
the benchmarks yourself to find out how sac-format performs on your system.
*** Easy
sac-format's *easy*---single-header makes integration to any project simple. [[https://cmake.org/][CMake]]
makes building on different platforms a breeze. Object-oriented design makes use
easy and intuitive. See the [[Quickstart]] section to get up and running.
*** Small
sac-format's *small*---in total (header + implementation--excluding comments) adds
to fewer than 1500 lines of code. Small size opens to door to using on any sort
of hardware (old or new).
*** Documentation
sac-format's extensively *documented*---both online and in the code. Nothing's
hidden---nothing's obscured. Curious how something works? Check the
documentation and in-code comments.

* Quickstart
** Manual Instructions
*** Build Instructions
Building is as easy as cloning the repository, running CMake for your preferred
build tool, and then building.
**** Ninja
#+begin_src bash :returns code :eval no
git clone https://github.com/arbCoding/sac-format.git
mkdir bin && cd bin/
cmake -G Ninja .. && ninja
#+end_src
**** Make
#+begin_src bash :returns code :eval no
git clone https://github.com/arbCoding/sac-format.git
mkdir bin && cd bin/
cmake .. && make
#+end_src
*** Use
To use, link to the compiled library (=libsac-format.a= on Linux/macOS,
=libsac-format.lib= on Windows) and include =src/sac_format.hpp=.
** CMake Integration
To integrate sac-format into your CMake project, add it to your =CMakeLists.txt=.
#+begin_example
include(FetchContent)
set(FETCHCONTENT_UPDATES_DISCONNECTED TRUE)
FetchContent_Declare(sac-format
    GIT_REPOSITORY https://github.com/arbCoding/sac-format
    GIT_TAG vX.X.X)
FetchContent_MakeAvailable(sac-format)
include_directory(${sacformat_SOURCE_DIR/src})

project (your_project
    LANGUAGES CXX)

add_executable(your_executable
    your_sources
    sac_format.hpp)

target_link_libraries_library(your_executable
    PRIVATE sac-format)
#+end_example

** Examples
*** Reading and Writing
#+name: empty_trace_example
#+begin_src cpp :cache no :returns code :results verbatim :flags -std=c++20 -L../../bin/libsac-format.a -I../
#include <filesystem>
#include <iostream>
#include <sac_format.hpp>

using namespace sacfmt;
namespace fs = std::filesystem;

int main() {
    Trace trace1{};
    // Change header variable
    trace1.kstnm("Station1");
    fs::path file{"./test.SAC"};
    // Write
    trace1.write(file);
    // Read
    Trace trace2 = Trace(file);
    // Confirm equality
    std::cout << (trace1 == trace2) << '\n';
    fs::remove(file);
    return EXIT_SUCCESS;
}
#+end_src

#+RESULTS: empty_trace_example

* Notes
** Why C++20 and not C++23
Compiler restrictions---C++23 support [[https://en.cppreference.com/w/cpp/compiler_support/23][requires]] GCC-13+ and Clang-16+. Many
systems, still use GCC-12 and Clang-15---which has near complete support for
[[https://en.cppreference.com/w/cpp/compiler_support/20][C++20]].

sac-format strives for accessibility, modernity, safety, and speed---C++20
provides the best fit.
** Dependencies
1) [[https://www.boost.org/users/history/version_1_83_0.html][boost 1.83.0]].

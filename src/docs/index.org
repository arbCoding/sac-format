#+include: ./misc/settings.org

#+begin_export html
<a href="https://github.com/arbCoding/sac-format/actions/workflows/cmake-windows.yml">
<img alt="Windows 2022 Build Status", src="https://github.com/arbCoding/sac-format/actions/workflows/cmake-windows.yml/badge.svg" />
</a>

<a href="https://github.com/arbCoding/sac-format/actions/workflows/cmake-ubuntu.yml">
<img alt="Ubuntu 22.04 Build Status", src="https://github.com/arbCoding/sac-format/actions/workflows/cmake-ubuntu.yml/badge.svg" />
</a>

<a href="https://github.com/arbCoding/sac-format/actions/workflows/cmake-macos.yml">
<img alt="macOS 13 Build Status", src="https://github.com/arbCoding/sac-format/actions/workflows/cmake-macos.yml/badge.svg" />
</a>

<a href="https://codecov.io/gh/arbCoding/sac-format/" >
<img alt="Code Coverage" src="https://codecov.io/gh/arbCoding/sac-format/graph/badge.svg" />
</a>

<img src="https://tokei.rs/b1/github/arbCoding/sac-format?category=code" />

<img src="https://img.shields.io/github/languages/code-size/arbCoding/sac-format" />

<a href="https://app.codacy.com/gh/arbCoding/sac-format/dashboard">
<img alt="Codacy grade" src="https://img.shields.io/codacy/grade/870db5c2793a48df9ed98e942a08fc9e" />
</a>

<a href="https://www.codefactor.io/repository/github/arbcoding/sac-format">
<img src="https://www.codefactor.io/repository/github/arbcoding/sac-format/badge" alt="CodeFactor" />
</a>

<a href="https://github.com/arbCoding/sac-format/actions/workflows/cpp-linter.yml">
<img alt="CPP-Linter Results" src="https://github.com/arbCoding/sac-format/actions/workflows/cpp-linter.yml/badge.svg" />
</a>

</a>
#+end_export

* Introduction

sac-format is a single-header statically linked library designed to make working
with binary [[https://ds.iris.edu/files/sac-manual/manual/file_format.html][SAC]]-files as easy as possible. Written in C++20, it follows a modern
and easy to read programming-style while providing the high performance brought
by C++.

sac-format's developed on [[https://github.com/arbCoding/sac-format][GitHub]]!

[[https://arbcoding.github.io/sac-format/sac-format_manual.pdf][Download]] an offline version of the documentation (PDF).

** Why sac-format

sac-format is Free and Open Source Software (FOSS) released under the MIT
license. Anyone can use it, for any purpose (including proprietary software),
anywhere in the world. sac-format is operating system agnostic and confirmed
working on Windows, macOS, and Linux systems.

*** Safe

sac-format is *safe*---it conforms to a strict set of C++ programming guidelines,
chosen to ensure safe code-execution. The guideline conformance list is in
[[https://github.com/arbCoding/sac-format/blob/main/.github/workflows/cpp-linter.yml][=cpp-linter.yml=]] and can be cross-referenced against this [[https://clang.llvm.org/extra/clang-tidy/checks/list.html][master list]]. Results
of conformance checking is [[https://github.com/arbCoding/sac-format/actions/workflows/cpp-linter.yml][here]].

Testing is an important part of software development; the sac-format library is
extensively tested using the [[https://github.com/catchorg/Catch2][Catch2]] testing framework. Everything from low-level
binary conversions to high-level =Trace= reading/writing are tested and confirmed
working. Check and run the tests yourself. See the [[Testing][Testing]] section for more
information.

*** Fast

sac-format is *fast*---it's written in C++, carefully optimized, and extensively
benchmarked. You can run the benchmarks yourself to find out how sac-format
performs on your system. See the [[Benchmarking][Benchmarking]] section for more information.

*** Easy

sac-format is *easy*---single-header makes integration in any project simple.
Building is a breeze with [[https://cmake.org/][CMake]], even on different platforms. Object-oriented
design makes use easy and intuitive. See the [[Quickstart][Quickstart]] section to get up and
running.

*** Small

sac-format is *small*---in total (header + implementation--excluding comments)
it's fewer than 2000 lines of code. Small size opens the door to using on any
sort of hardware (old or new) and makes it easy to expand upon.

*** Documented

sac-format is extensively *documented*---both online and in the code. Nothing's
hidden---nothing's obscured. Curious how something works? Check the
documentation and in-code comments.

*** Transparent

sac-format is *transparent*---all [[https://app.codacy.com/gh/arbCoding/sac-format/dashboard][analysis]] and [[https://app.codecov.io/gh/arbCoding/sac-format][coverage]] information is publicly
available online.

[[https://www.codefactor.io/repository/github/arbcoding/sac-format][CodeFactor Analysis]]

*** Trace Class

sac-format includes the =Trace= class for seismic traces, providing high-level
object-oriented abstraction to seismic data. With the =Trace= class, you don't
need to worry about manually reading SAC-files word-by-word. It's compatible
with =v6= and =v7= SAC-files and can automatically detect the version upon reading.
File output defaults to =v7= SAC-files and there is a =legacy_write= function for =v6=
output.

*** Low-Level I/O

If you want to roll your own SAC-file processing workflow you can use the
low-level I/O functionality built into sac-format. All functions tested and
confirmed working---they're used to build the =Trace= class!

* Quickstart

** Manual Instructions

*** Build Instructions

Building is as easy as cloning the repository, running CMake for your preferred
build tool, and then building.

**** GCC

#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, bgcolor=LightGray
#+begin_src bash :returns code :eval no
git clone https://github.com/arbCoding/sac-format.git
cmake --preset gcc-release
cmake --build ./build/release/gcc
#+end_src

**** Clang

#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, bgcolor=LightGray
#+begin_src bash :returns code :eval no
git clone https://github.com/arbCoding/sac-format.git
cmake --preset clang-release
cmake --build ./build/release/clang
#+end_src

*** Use

To use link to the compiled library (=libsac-format.a= on Linux/macOS,
=libsac-format.lib= on Windows) and include =src/sac_format.hpp=.

** Example Programs

*** =list_sac=

=list_sac= is a command line program that takes a single SAC-file as its input
argument. It reads the SAC-file and outputs the header/footer information, as
well as the true size of the [[=data1=][=data1=]] and [[=data2=][=data2=]] vectors.

** CMake Integration

To integrate sac-format into your CMake project, add it to your =CMakeLists.txt=.

#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src cmake :eval no
include(FetchContent)
set(FETCHCONTENT_UPDATES_DISCONNECTED TRUE)
FetchContent_Declare(sac-format
    GIT_REPOSITORY https://github.com/arbCoding/sac-format
    GIT_TAG vX.X.X)
FetchContent_MakeAvailable(sac-format)
include_directory(${sacformat_SOURCE_DIR/src})

project (your_project
    LANGUAGES CXX)

add_executable(your_executable
    your_sources
    sac_format.hpp)

target_link_libraries_library(your_executable
    PRIVATE sac-format)
#+end_src
#+latex: \end{minipage}\end{center}

** Example

*** Reading and Writing

#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+name: empty_trace_example
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src cpp :cache yes :returns code :results verbatim :flags -std=c++20 -L../../bin/libsac-format.a -I../ :eval no
#include <filesystem>
#include <iostream>
#include <sac_format.hpp>

using namespace sacfmt;
namespace fs = std::filesystem;

int main() {
    Trace trace1{};
    // Change header variable
    trace1.kstnm("Station1");
    fs::path file{"./test.SAC"};
    // Write
    trace1.write(file);
    // Read
    Trace trace2 = Trace(file);
    // Confirm equality
    std::cout << (trace1 == trace2) << '\n';
    fs::remove(file);
    return EXIT_SUCCESS;
}
#+end_src
#+latex: \end{minipage}\end{center}

* Documentation

** Convenience Functions

- =degrees_to_radians=

Convert decimal degrees to radians.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double radians{sacfmt::degrees_to_radians(degrees)};
#+end_src
#+latex: \end{minipage}\end{center}


- =radians_to_degrees=

Convert radians to decimal degrees.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double degrees{sacfmt::radians_to_degrees(radians)};
#+end_src
#+latex: \end{minipage}\end{center}

- =gcarc=

Calculate great-circle arc distance (spherical planet).
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double gcarc{sacfmt::gcarc(latitude1, longitude1, latitude2, longitude2)};
#+end_src
#+latex: \end{minipage}\end{center}

- =azimuth=

Calculate azimuth between two points (spherical planet).
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double azimuth{sacfmt::azimuth(latitude2, longitude2, latitude1, longitude2)};
double back_azimuth{sacfmt::azimuth(latitude1, longitude1, latitude2, longitude2)};
#+end_src
#+latex: \end{minipage}\end{center}

- =limit_360=

Take arbitrary value of degrees and unwrap to $[0, 360]$.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double degrees_limited{sacfmt::limit_360(degrees)};
#+end_src
#+latex: \end{minipage}\end{center}

- =limit_180=

Take arbitrary value of degrees and unwrap to $[-180, 180]$. Useful for
longitude.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double degrees_limited{sacfmt::limit_180(degrees)};
#+end_src
#+latex: \end{minipage}\end{center}

- =limit_90=

Take arbitrary value of degrees and unwrap to $[-90, 90]$. Useful for latitude.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double degrees_limited{sacfmt::limit_90(degrees)};
#+end_src
#+latex: \end{minipage}\end{center}

** Trace class

The =Trace= class provides easy access to SAC-files in C++. Each SAC-file is a
=Trace=; therefore, each =Trace= object is a seismic trace (seismogram).

*** Reading SAC

SAC-files can be read in by using the parameterized constructor with a
[[https://en.cppreference.com/w/cpp/filesystem/path][=std::filesystem::path=]] ([[https://en.cppreference.com/w/cpp/header/filesystem][=<filesystem>=]]) or a [[https://en.cppreference.com/w/cpp/string/basic_string][=std::string=]] ([[https://en.cppreference.com/w/cpp/header/string][=<string>=]])
variable that corresponds to the location of the SAC-file.

For example:
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
#include <filesystem>
#include <sac_foramt.hpp>

int main() {
  std::filesystem::path my_file{"/home/user/data/ANMO.SAC"};
  sacfmt::Trace anmo = Trace(my_file);
  return EXIT_SUCCESS;
}
#+end_src
#+latex: \end{minipage}\end{center}

*** Writing SAC

Writing SAC files can be done using one of two write functions.

**** =v7= files

Use =write= (for example =trace.write(filename)=).
**** =v6= files

Use =legacy_write= (for example =trace.legacy_write(filename)=).

*** Getters and Setters

Every [[SAC-file format][SAC variable]] is accessed via getters and setters of the same name.

**** Example Getters

- =trace.npts()=
- =trace.data1()=
- =trace.kstnm()=

**** Example Setters

- =trace.kevnm("Event 1")=
- =trace.evla(32.89)=
- =trace.mag(3.21)=

*** Internal Structure

The SAC-trace stores the data internally in a series of pre-allocated
[[https://en.cppreference.com/w/cpp/container/array][=std::array=]] ([[https://en.cppreference.com/w/cpp/header/array][=<array>=]]) container objects. [[Getters and Setters][Getters and setters]] access these via
a [[Lookup Table][lookup table]]. The internal components are below:

**** Lookup Table
=sac_map=

**** =floats= array

**** =doubles= array

**** =ints= array

**** =bools= array

**** =strings= array

**** =data= array

*** Convenience Methods

- =calc_geometry=

Calculate =gcarc=, =dist=, =az=, and =baz= assuming spherical Earth.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
trace.stla(45.3);
trace.stlo(34.5);
trace.evla(18.5);
trace.evlo(-34);
trace.calc_geometry();
std::cout << "GcArc: " << trace.gcarc() << '\n';
std::cout << "Dist: " << trace.dist() << '\n';
std::cout << "Azimuth: " << trace.az() << '\n';
std::cout << "BAzimuth: " << trace.baz() << '\n';
#+end_src
#+latex: \end{minipage}\end{center}

- =frequency=

Calculate frequency from =delta=.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
double frequency{trace.frequency()};
#+end_src
#+latex: \end{minipage}\end{center}

- =date=

Return =std::string= formatted as ~YYYY-JJJ~ from =nzyear= and =nzjday=.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
std::string date{trace.date()};
#+end_src
#+latex: \end{minipage}\end{center}

- =time=

Return =std::string= formatted as ~HH:MM:SS.xxx~ from =nzhour=, =nzmin=, =nzsec=, and
=nzmsec=.
#+latex: \begin{center}\begin{minipage}[t]{0.75\textwidth}
#+attr_latex: :options frame=lines, framesep=2mm, baselinestretch=1.2, fontsize=\footnotesize, linenos, bgcolor=LightGray
#+begin_src C++ :eval no
std::string time{trace.time()};
#+end_src
#+latex: \end{minipage}\end{center}

*** Exceptions

sac-format throws exceptions of type =sacfmt::io_error= in the event of a failure
to read/write a SAC-file.

** Low-Level I/O

Low-level I/O functions are as follows:

**** Binary conversion

***** =int_to_binary= and =binary_to_int=

Conversion pair for binary representation of integer values.

***** =float_to_binary= and =binary_to_float=

Conversion pair for binary representation of floating-point values.

***** =double_to_binary= and =binary_to_double=

Conversion pair for binary representation of double-precision values.

***** =string_to_binary= and =binary_to_string=

Conversion pair for binary representation of two-word (regular) string values.

***** =long_string_to_binary= and =binary_to_long_string=

Conversion pair for binary representation of four-word (only [[=kstnm=][=kstnm=]]) string
values.

**** Reading/Writing

***** =read_word=, =read_two_words=, =read_four_words=, and =read_data=

Functions to read one-, two-, and four-word variables (depending on the header)
and an arbitrary amount of binary data (exclusive to =data1= and =data2=).

***** =convert_to_word=, =convert_to_words=, and =bool_to_word=

Takes objects and converts them into =std::vector<char>= (=convert_to_word= and
=bool_to_word=) or =std::array<char, N>= (=convert_to_words=, N = # of words).

***** =write_words=

Writes input words (as =std::vector<char>=) to a binary SAC-file.

**** Utility

***** =concat_words=

Concatenates words taking into account the system endianness.

***** =bits_string= and =string_bits=

Template function that performs conversion of binary strings of arbitrary length
to an arbitrary number of words.

***** =remove_leading_spaces= and =remove_trailing_spaces=

Remove leading and trailing blank spaces from strings assuming ASCII convention
(space character is integer 32, below that value are control characters that
also appear as blank spaces).

***** =string_cleaning=

Ensures string does not contain an internal termination character (=\0=) and
removes it if present, then removes blank spaces.

***** =prep_string=

Performs =string_cleaning= followed by string truncation/padding to the necessary
length.

***** =equal_within_tolerance=

Floating-point/double-precision equality within a provided tolerance (default is
=f_eps=, defined in =sac_format.hpp=).

** Testing

=utests.cpp= contains the unit- and integration-tests, using Catch2. Test coverage
details are visible on [[https://app.codecov.io/gh/arbCoding/sac-format][CodeCov.io]] and [[https://app.codacy.com/gh/arbCoding/sac-format/dashboard][Codacy.com]]. All tests can be locally-run
to ensure full functionality and compliance.

*** Errors only

By default =utests= prints out a pass summary, without details unless an error is
encountered.

*** Full output

By passing the =--success= flag (=utests --success=) you can see the full results of
all tests.

*** Compact output

The [[Full output][full output]] is verbose, using the compact reporter will condense the test
results (=utests --reporter=compact --success=).

*** Additional options

To see additional options, run =utests -?=.

** Benchmarking

=benchmark.cpp= contains the benchmarks. Running it locally will provide
information on how long each function takes; benchmarks start with the low-level
I/O function and build up to Trace reading, writing, and equality comparison.

To view available optional flags, run =becnhmark -?=.

** Source File List

*** Core

The two core files are split in the standard interface (hpp)/implementation
(cpp) format.

**** =sac_format.hpp=

Interface---function declarations and constants.

**** =sac_format.cpp=

Implementation---function details.

*** Testing and Benchmarking

**** =util.hpp=

Utility functions and constants exclusive to testing and benchmarking. Not
split into interface/implementation.

**** =utests.cpp=

**** =benchmark.cpp=

*** Example programs

**** =list_sac.cpp=

** Dependencies

*** Automatic (CMake)

1) [[https://github.com/Reputeless/Xoshiro-cpp][Xoshiro-cpp v1.12.0]] (testing and benchmarking)
2) [[https://github.com/catchorg/Catch2][Catch2 v3.4.0]] (testing and benchmarking)


** SAC-file format

The official and up-to-date documentation for the SAC-file format is available
from the EarthScope Consortium (formerly IRIS/UNAVCO) [[https://ds.iris.edu/files/sac-manual/manual/file_format.html][here]]. The following
subsections constitute my notes on the format. Below is a quick guide---all
credit for the creation of, and documentation for, the SAC file-format belongs
to its developers and maintainers (details [[https://ds.iris.edu/ds/nodes/dmc/software/downloads/sac/][here]]).

*** Floating-point (39)

32-bit (1 word, 4 bytes)

**** =depmin=

Minimum value of the dependent variable
(displacement/velocity/acceleration/volts/counts).

**** =depmen=

Mean value of the dependent variable.

**** =depmax=

Maximum value of the dependent variable.

**** =odelta=

Modified (/observational/) value of [[=delta=][=delta=]].

**** =resp(0--9)=

Instrument response parameters (poles, zeros, and a constant).

*Not used by SAC*---they're free for other purposes.

**** =stel=

Station elevation in meters above sea level (/m.a.s.l/).

*Not used by SAC*---free for other purposes.

**** =stdp=

Station depth in meters below surface (borehole/buried vault).

*Not used by SAC*---free for other purposes.

**** =evel=

Event elevation /m.a.s.l./

*Not used by SAC*---free for other purposes.

**** =evdp=

Event depth in kilometers (/previously meters/) below surface.

**** =mag=

Event magnitude.

**** =user(0--9)=

Storage for user-defined values.

**** =dist=

Station--Event distance in kilometers.

**** =az=

Azimuth $\mathrm{\left(Event \to Station\right)}$, decimal degrees from North.

**** =baz=

Back-azimuth $\mathrm{\left(Station \to Event\right)}$, decimal degrees from
North.

**** =gcarc=

Station--Event great circle arc-length, decimal degrees.

**** =cmpaz=

Instrument measurement azimuth, decimal degrees from North.

|---------+-----------|
| Value   | Direction |
|---------+-----------|
| 0\deg   | North     |
| 90\deg  | East      |
| 180\deg | South     |
| 270\deg | West      |
| Other   | 1/2/3     |
|---------+-----------|
**** =cmpinc=

Instrument measurement incident angle, decimal degrees from upward vertical
(incident 0\deg = dip -90\deg).
|---------+------------|
| Value   | Direction  |
|---------+------------|
| 0\deg   | Up         |
| 90\deg  | Horizontal |
| 180\deg | Down       |
| 270\deg | Horizontal |
|---------+------------|
*NOTE:* SEED/MINISEED use dip angle, decimal degrees down from horizontal (dip
 0\deg = incident 90\deg).

**** =xminimum=

Spectral-only equivalent of [[=depmin=][=depmin=]] ($f_{0}$ or $\omega_{0}$).

**** =xmaximum=

Spectral-only equivalent of [[=depmax=][=depmax=]] ($f_{max}$ or $\omega_{max}$).

**** =yminimum=

Spectral-only equivalent of [[=b=][=b=]].

**** =ymaximum=

Spectral-only equivalent of [[=e=][=e=]].

*** Double (22)

64-bit (2 words, 8 bytes)

*NOTE:* in the header section these are floats---they're doubles in the footer
 section of =v7= SAC-files. In memory they're stored as doubles regardless of the
 SAC-file version.

**** =delta=

Increment between evenly spaced samples ($\Delta t$ for timeseries, $\Delta f$
or $\Delta\omega$ for spectra).

**** =b=

First value (/begin/) of independent variable ($t_{0}$).

**** =e=

Final value (/end/) of independent variable ($t_{max}$).

**** =o=

Event /origin/ time, in seconds relative to the reference time.

**** =a=

Event first /arrival/ time, in seconds relative to the reference time.

**** =t(0--9)=

User defined /time/ values, in seconds relative to the reference time.

**** =f=

Event end (/fini/) time, in seconds relative to the reference time.

**** =stla=

Station latitude in decimal degrees, N/S--positive/negative.

sacfmt automatically enforces $\mathrm{stla}\in[-90, 90]$.

**** =stlo=

Station longitude in decimal degrees, E/W--positive/negative.

sacfmt automatically enforces $\mathrm{stlo}\in[-180, 180]$.

**** =evla=

Event latitude in decimal degrees, N/S--positive/negative.

sacfmt automatically enforces $\mathrm{evla}\in[-90, 90]$.

**** =evlo=

Event longitude in decimal degrees, E/W--positive/negative.

sacfmt automatically enforces $\mathrm{evlo}\in[-180, 180]$.

**** =sb=

Original (/saved/) [[=b=][=b=]] value.

**** =sdelta=

Original (/saved/) [[=delta=][=delta=]] value.

*** Integer (26)

32-bit (1 word, 4 bytes)

**** =nzyear=

Reference time GMT year.

**** =nzjday=

Reference time GMT day-of-year (often called [[https://en.wikipedia.org/wiki/Julian_day][Julian Date]]) (1--366).

**** =nzhour=

Reference time GMT hour (00--23).

**** =nzmin=

Reference time GMT minute (0--59).

**** =nzsec=

Reference time GMT second (0--59).

**** =nzmsec=

Reference time GMT Millisecond (0--999).

**** =nvhdr=

SAC-file version.

|---------+-----------------------------------|
| Version | Description                       |
|---------+-----------------------------------|
| =v7=      | Footer (2020+, sac 102.0+)        |
| =v6=      | No footer (pre-2020, sac 101.6a-) |
|---------+-----------------------------------|
**** =norid=

Origin ID.

**** =nevid=

Event ID.

**** =npts=

/Number of points/ in data.

**** =nsnpts=

Original (/saved/) [[=npts=][=npts=]].

**** =nwfid=

Waveform ID.

**** =nxsize=

Spectral-only equivalent of [[=npts=][=npts=]] (length of spectrum).

**** =nysize=

Spectral-only, width of spectrum.

**** =iftype=

File type.

|-------+----------+----------------------------|
| Value | Type     | Description                |
|-------+----------+----------------------------|
|    01 | ITIME    | Time-series                |
|    02 | IRLIM    | Spectral (real/imaginary)  |
|    03 | IAMPH    | Spectral (amplitude/phase) |
|    04 | IXY      | General XY file            |
|    ?? | IXYZ\ast | General XYZ file           |
|-------+----------+----------------------------|
\ast{}Value not listed in the standard.

**** =idep=

Dependent variable type.
|-------+--------+-------------------------------------------------------|
| Value | Type   | Description                                           |
|-------+--------+-------------------------------------------------------|
|    05 | IUNKN  | Unknown                                               |
|    06 | IDISP  | Displacement (nm)                                     |
|    07 | IVEL   | Velocity $\mathrm{\left(\frac{nm}{s}\right)}$         |
|    08 | IACC   | Acceleration $\mathrm{\left(\frac{nm}{s^{2}}\right)}$ |
|    50 | IVOLTS | Velocity (volts)                                      |
|-------+--------+-------------------------------------------------------|
**** =iztype=

Reference time equivalent.
|--------+----------+----------------------------|
|  Value | Type     | Description                |
|--------+----------+----------------------------|
|     05 | IUNKN    | Unknown                    |
|     09 | IB       | Recording start time       |
|     10 | IDAY     | Midnight reference GMT day |
|     11 | IO       | Event origin time          |
|     12 | IA       | First arrival time         |
| 13--22 | IT(0--9) | User defined time (t) pick |
|--------+----------+----------------------------|
**** =iinst=

Recording instrument type.

*Not used by SAC*---free for other purposes.

**** =istreg=

Station geographic region.

*Not used by SAC*---free for other purposes.

**** =ievreg=

Event geographic region.

*Not used by SAC*---free for other purposes.

**** =ievtyp=

Event type.
|-------+--------+------------------------------------------------------|
| Value | Type   | Description                                          |
|-------+--------+------------------------------------------------------|
|    05 | IUNKN  | Unknown                                              |
|    11 | IO     | Other source of known origin                         |
|    37 | INUCL  | Nuclear                                              |
|    38 | IPREN  | Nuclear pre-shot                                     |
|    39 | IPOSTN | Nuclear post-shot                                    |
|    40 | IQUAKE | Earthquake                                           |
|    41 | IPREQ  | Foreshock                                            |
|    42 | IPOSTQ | Aftershock                                           |
|    43 | ICHEM  | Chemical explosion                                   |
|    44 | IOTHER | Other                                                |
|    72 | IQB    | Quarry/mine blast---confirmed by quarry/mine         |
|    73 | IQB1   | Quarry/mine blast---designed shot info-ripple fired  |
|    74 | IQB2   | Quarry/mine blast---observed shot info-ripple fired  |
|    75 | IQBX   | Quarry/mine blast---single shot                      |
|    76 | IQMT   | Quarry/mining induced events---tremor and rockbursts |
|    77 | IEQ    | Earthquake                                           |
|    78 | IEQ1   | Earthquake in a swarm or in an aftershock sequence   |
|    79 | IEQ2   | Felt earthquake                                      |
|    80 | IME    | Marine explosion                                     |
|    81 | IEX    | Other explosion                                      |
|    82 | INU    | Nuclear explosion                                    |
|    83 | INC    | Nuclear cavity collapse                              |
|    85 | IL     | Local event of unknown origin                        |
|    86 | IR     | Region event of unknown origin                       |
|    87 | IT     | Teleseismic event of unknown origin                  |
|    88 | IU     | Undetermined/conflicting information                 |
|-------+--------+------------------------------------------------------|
**** =iqual=

Quality of data.
|-------+--------+---------------------------|
| Value | Type   | Description               |
|-------+--------+---------------------------|
|    44 | IOTHER | Other                     |
|    45 | IGOOD  | Good                      |
|    46 | IGLCH  | Glitches                  |
|    47 | IDROP  | Dropouts                  |
|    48 | ILOWSN | Low signal-to-noise ratio |
|-------+--------+---------------------------|
*Not used by SAC*---free for other purposes.

**** =isynth=

Synthetic data flag.
|-------+---------+-------------|
| Value | Type    | Description |
|-------+---------+-------------|
| 49    | IRLDATA | Real data   |
| XX    | \ast    | Synthetic   |
|-------+---------+-------------|
\ast{}Values and types not listed in the standard.

**** =imagtyp=

Magnitude type.

|-------+------+----------------------------------|
| Value | Type | Description                      |
|-------+------+----------------------------------|
|    52 | IMB  | Body-wave magnitude ($M_{b}$)    |
|    53 | IMS  | Surface-wave magnitude ($M_{s}$) |
|    54 | IML  | Local magnitude ($M_{l}$)        |
|    55 | IMW  | Moment magnitude ($M_{w}$)       |
|    56 | IMD  | Duration magnitude ($M_{d}$)     |
|    57 | IMX  | User-defined magnitude ($M_{x}$) |
|-------+------+----------------------------------|
**** =imagsrc=

Source of magnitude information.

|-------+----------+----------------------------------------|
| Value | Type     | Description                            |
|-------+----------+----------------------------------------|
|    58 | INEIC    | National Earthquake Information Center |
|    61 | IPDE     | Preliminary Determination of Epicenter |
|    62 | IISC     | Internation Seismological Centre       |
|    63 | IREB     | Reviewed Event Bulletin                |
|    64 | IUSGS    | U.S. Geological Survey                 |
|    65 | IBRK     | UC Berkeley                            |
|    66 | ICALTECH | California Institute of Technology     |
|    67 | ILLNL    | Lawrence Livermore National Laboratory |
|    68 | IEVLOC   | Event location (computer program)      |
|    69 | IJSOP    | Joint Seismic Observation Program      |
|    70 | IUSER    | The user                               |
|    71 | IUNKNOWN | Unknown                                |
|-------+----------+----------------------------------------|
**** =ibody=

Body/spheroid definition used to calculate distances.

|--------+----------+------------------+-------------------------+------------------------|
|  Value | Type     | Name             | Semi-major axis (a [m]) | Inverse Flattening (/f/) |
|--------+----------+------------------+-------------------------+------------------------|
| -12345 | UNDEF    | Earth (/Historic/) |               6378160.0 |             0.00335293 |
|     98 | ISUN     | Sun              |             696000000.0 |               8.189e-6 |
|     99 | IMERCURY | Mercury          |               2439700.0 |                    0.0 |
|    100 | IVENUS   | Venus            |               6051800.0 |                    0.0 |
|    101 | IEARTH   | Earth (/WGS84/)    |               6378137.0 |  0.0033528106647474805 |
|    102 | IMOON    | Moon             |               1737400.0 |                    0.0 |
|    103 | IMARS    | Mars             |               3396190.0 |   0.005886007555525457 |
|--------+----------+------------------+-------------------------+------------------------|
*** Boolean (4)

32-bit (1 word, 4 bytes) in-file/8-bit (1 byte) in-memory

**** =leven=

*REQUIRED*

Evenly-spaced data flag.

If true, then data is evenly spaced.

**** =lpspol=

Station polarity flag.

If true, then station has positive-polarity---it follows the left-hand
convention (for example, North-East-Up [NEZ]).

**** =lovrok=

File overwrite flag.

If true, then it's okay to overwrite the file.

**** =lcalda=

Calculate geometry flag.

If true, then calculate [[=dist=][=dist=]], [[=az=][=az=]], [[=baz=][=baz=]], and [[=gcarc=][=gcarc=]] from [[=stla=][=stla=]], [[=stlo=][=stlo=]],
[[=evla=][=evla=]], and [[=evlo=][=evlo=]].

*** String (23)

32/64-bit (2/4 words, 8/16 bytes, 8/16 characters)

**** =kstnm=

Station name.

**** =kevnm=\ast

Event name.

\ast{}This is the *only* four word (16 character) string.

**** =khole=

Nuclear---hole identifier.

Other---Location identifier (LOCID).

**** =ko=

Text for [[=o=][=o=]].

**** =ka=

Text for [[=a=][=a=]].

**** =kt(0--9)=

Text for [[=t(0--9)=][=t(0--9)=]].

**** =kf=

Text for [[=f=][=f=]].

**** =kuser(0--2)=

Text for the first three of [[=user(0--9)=][=user(0--9)=]].

**** =kdatrd=

Date the data was read onto a computer.

**** =kinst=

Text for [[=iinst=][=iinst=]].

*** Data (2)

32-bit (2 words, 8 bytes) in-file/64-bit (4 words, 16 bytes) in-memory

Stored as floating-point (32-bit) values in SAC-files; stored as
double-precision in memory.

**** =data1=

The first data vector---*always* present in a SAC-file and begins at word 158.

**** =data2=

The second data vector---*conditionally* present and begins after [[=data1=][=data1=]].

*Required* if [[=leven=][=leven=]] is false, or if [[=iftype=][=iftype=]] is spectral/XY/XYZ.

* Notes

** Why C++20 and not C++23

Compiler restrictions---C++23 support [[https://en.cppreference.com/w/cpp/compiler_support/23][requires]] GCC-13+ and Clang-16+. Many
systems, still use GCC-12 and Clang-15---which has near complete support for
[[https://en.cppreference.com/w/cpp/compiler_support/20][C++20]].

sac-format strives for accessibility, modernity, safety, and speed---C++20
provides the best fit.
